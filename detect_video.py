import cv2
import torch
import time
import json
import subprocess
import sys
from ultralytics import YOLO


# ==== C·∫§U H√åNH ====
MODEL_PATH = "model/best5n.pt"           # file model YOLO ƒë√£ train
VIDEO_PATH = "input.mp4"          # video input
OUTPUT_PATH = "output.mp4"        # video output
JSON_PATH = "objects_data.json"   # file JSON ch·ª©a object & s·ªë l∆∞·ª£ng mong mu·ªën
RESULT_JSON_PATH = "result_count.json"  # file JSON xu·∫•t k·∫øt qu·∫£

# ==== LOAD MODEL ====
model = YOLO(MODEL_PATH)

# ==== ƒê·ªåC FILE JSON ====
with open(JSON_PATH, "r", encoding="utf-8") as f:
    data = json.load(f)
    expected_objects = {obj["name"].lower(): obj["expected_count"] for obj in data}

print("Expected objects:", expected_objects)

# ==== M·ªû VIDEO ====
cap = cv2.VideoCapture(VIDEO_PATH)
if not cap.isOpened():
    print("Kh√¥ng th·ªÉ m·ªü video")
    exit()

# Th√¥ng tin video
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps_input = cap.get(cv2.CAP_PROP_FPS)
total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
print(f"Video input: {width}x{height}, {fps_input} FPS, {total_frames} frames")

# L∆∞u video output
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter(OUTPUT_PATH, fourcc, fps_input, (width, height))

# ==== Bi·∫øn l∆∞u k·∫øt qu·∫£ cu·ªëi c√πng ====
final_detected_counts = {}

# ==== LOOP DETECT ====
frame_idx = 0  # ƒë·∫øm s·ªë frame

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame_idx += 1
    start_time = time.time()

    # Detect object (kh√¥ng resize ƒë·ªÉ gi·ªØ nguy√™n t·ªâ l·ªá)
    results = model(frame, conf=0.5, verbose=False)

    # ƒê·∫øm object detect ƒë∆∞·ª£c
    detected_counts = {}
    for box in results[0].boxes:
        cls_id = int(box.cls)
        cls_name = model.names[cls_id].lower()  # chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
        detected_counts[cls_name] = detected_counts.get(cls_name, 0) + 1

    # C·∫≠p nh·∫≠t k·∫øt qu·∫£ cu·ªëi c√πng (frame cu·ªëi)
    final_detected_counts = detected_counts.copy()

    # ==== Ch·ªâ in th√¥ng b√°o m·ªói 10 frame ====
    if frame_idx % 10 == 0:
        print(f"\n--- Frame {frame_idx}/{total_frames} ---")
        for obj_name, expected_count in expected_objects.items():
            detected_count = detected_counts.get(obj_name, 0)
            if detected_count == expected_count:
                print(f"‚úì ƒê√£ ƒë·ªß {expected_count} {obj_name}")
            elif detected_count < expected_count:
                print(f"‚úó Thi·∫øu {expected_count - detected_count} {obj_name} (c√≥ {detected_count}/{expected_count})")
            else:
                print(f"‚ö† Th·ª´a {detected_count - expected_count} {obj_name} (c√≥ {detected_count}/{expected_count})")

    # V·∫Ω k·∫øt qu·∫£
    annotated_frame = results[0].plot()

    # T√≠nh FPS
    end_time = time.time()
    fps = 1 / (end_time - start_time + 1e-6)

    # Hi·ªÉn th·ªã FPS tr√™n khung h√¨nh
    cv2.putText(annotated_frame, f"FPS: {fps:.2f}", (20, 40),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Xu·∫•t ra video
    out.write(annotated_frame)

    # Hi·ªÉn th·ªã
    cv2.imshow("YOLOv5 Detection", annotated_frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break


# ==== XU·∫§T K·∫æT QU·∫¢ RA JSON ====
result_data = []

for obj_name, expected_count in expected_objects.items():
    detected_count = final_detected_counts.get(obj_name, 0)
    difference = detected_count - expected_count
    
    status = "ƒë·ªß"
    if difference < 0:
        status = "thi·∫øu"
    elif difference > 0:
        status = "th·ª´a"
    
    result_data.append({
        "object_name": obj_name,
        "expected_count": expected_count,
        "detected_count": detected_count,
        "status": status,
        "difference": abs(difference)
    })

# Ghi ra file JSON
with open(RESULT_JSON_PATH, "w", encoding="utf-8") as f:
    json.dump(result_data, f, ensure_ascii=False, indent=4)

print(f"\n‚úì ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file: {RESULT_JSON_PATH}")

# In k·∫øt qu·∫£ t·ªïng k·∫øt
print("\n==== K·∫æT QU·∫¢ CU·ªêI C√ôNG ====")
for item in result_data:
    if item["status"] == "ƒë·ªß":
        print(f"‚úì {item['object_name']}: ƒê·ªß {item['expected_count']}")
    elif item["status"] == "thi·∫øu":
        print(f"‚úó {item['object_name']}: Thi·∫øu {item['difference']} (c√≥ {item['detected_count']}/{item['expected_count']})")
    else:
        print(f"‚ö† {item['object_name']}: Th·ª´a {item['difference']} (c√≥ {item['detected_count']}/{item['expected_count']})")

# ==== CLEANUP ====
cap.release()
out.release()
cv2.destroyAllWindows()

# ==== G·ªåI G·ª¨I TELEGRAM SAU KHI X·ª¨ L√ù XONG ====
try:
    print("\nüöÄ ƒêang g·ªçi send_tele.py ƒë·ªÉ g·ª≠i k·∫øt qu·∫£...")
    subprocess.run([sys.executable, 'send_tele.py'], check=True)
    print("‚úÖ ƒê√£ g·ª≠i k·∫øt qu·∫£ qua Telegram.")
except Exception as e:
    print(f"‚úó Kh√¥ng th·ªÉ g·ª≠i Telegram: {e}")