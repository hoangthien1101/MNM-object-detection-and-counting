#!/usr/bin/env python3
"""
Simple Desktop App - Giao di·ªán qu·∫£n l√Ω v·∫≠t th·ªÉ ƒë∆°n gi·∫£n
Kh√¥ng s·ª≠ d·ª•ng database, ch·ªâ l∆∞u trong memory
"""

import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
from datetime import datetime

class SimpleObjectManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Qu·∫£n l√Ω v·∫≠t th·ªÉ - Simple Version")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # Danh s√°ch v·∫≠t th·ªÉ trong memory
        self.objects = []
        self.load_data()
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
    def create_widgets(self):
        """T·∫°o giao di·ªán ch√≠nh"""
        # Header
        header_frame = ttk.Frame(self.root)
        header_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Label(header_frame, text="üéØ QU·∫¢N L√ù V·∫¨T TH·ªÇ", 
                 font=('Arial', 16, 'bold')).pack()
        ttk.Label(header_frame, text="Th√™m, s·ª≠a, x√≥a c√°c v·∫≠t th·ªÉ c·∫ßn theo d√µi", 
                 font=('Arial', 10)).pack()
        
        # Frame th√™m v·∫≠t th·ªÉ
        add_frame = ttk.LabelFrame(self.root, text="Th√™m v·∫≠t th·ªÉ m·ªõi")
        add_frame.pack(fill='x', padx=10, pady=5)
        
        # T√™n v·∫≠t th·ªÉ
        ttk.Label(add_frame, text="T√™n v·∫≠t th·ªÉ:").grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.name_var = tk.StringVar()
        self.name_entry = ttk.Entry(add_frame, textvariable=self.name_var, width=30)
        self.name_entry.grid(row=0, column=1, padx=5, pady=5)
        
        # S·ªë l∆∞·ª£ng mong ƒë·ª£i
        ttk.Label(add_frame, text="S·ªë l∆∞·ª£ng mong ƒë·ª£i:").grid(row=0, column=2, sticky='w', padx=5, pady=5)
        self.count_var = tk.IntVar(value=1)
        self.count_spinbox = ttk.Spinbox(add_frame, from_=1, to=100, textvariable=self.count_var, width=10)
        self.count_spinbox.grid(row=0, column=3, padx=5, pady=5)
        
        # M√¥ t·∫£
        ttk.Label(add_frame, text="M√¥ t·∫£:").grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.desc_var = tk.StringVar()
        self.desc_entry = ttk.Entry(add_frame, textvariable=self.desc_var, width=50)
        self.desc_entry.grid(row=1, column=1, columnspan=2, padx=5, pady=5)
        
        # N√∫t th√™m
        self.add_btn = ttk.Button(add_frame, text="‚ûï Th√™m v·∫≠t th·ªÉ", command=self.add_object)
        self.add_btn.grid(row=1, column=3, padx=5, pady=5)
        
        # Frame danh s√°ch v·∫≠t th·ªÉ
        list_frame = ttk.LabelFrame(self.root, text="Danh s√°ch v·∫≠t th·ªÉ")
        list_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Treeview
        columns = ('ID', 'T√™n', 'S·ªë l∆∞·ª£ng', 'M√¥ t·∫£', 'Ng√†y t·∫°o')
        self.objects_tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=12)
        
        # C·∫•u h√¨nh columns
        for col in columns:
            self.objects_tree.heading(col, text=col)
            self.objects_tree.column(col, width=120)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(list_frame, orient='vertical', command=self.objects_tree.yview)
        self.objects_tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack treeview v√† scrollbar
        self.objects_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # Frame n√∫t ƒëi·ªÅu khi·ªÉn
        control_frame = ttk.Frame(list_frame)
        control_frame.pack(side='bottom', fill='x', pady=5)
        
        self.edit_btn = ttk.Button(control_frame, text="‚úèÔ∏è S·ª≠a", command=self.edit_object, state='disabled')
        self.edit_btn.pack(side='left', padx=5)
        
        self.delete_btn = ttk.Button(control_frame, text="üóëÔ∏è X√≥a", command=self.delete_object, state='disabled')
        self.delete_btn.pack(side='left', padx=5)
        
        self.refresh_btn = ttk.Button(control_frame, text="üîÑ L√†m m·ªõi", command=self.refresh_list)
        self.refresh_btn.pack(side='left', padx=5)
        
        # Bind selection event
        self.objects_tree.bind('<<TreeviewSelect>>', self.on_object_select)
        
        # Load d·ªØ li·ªáu
        self.refresh_list()
    
    def add_object(self):
        """Th√™m v·∫≠t th·ªÉ m·ªõi"""
        name = self.name_var.get().strip()
        count = self.count_var.get()
        description = self.desc_var.get().strip()
        
        if not name:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n v·∫≠t th·ªÉ!")
            return
        
        # T·∫°o object m·ªõi
        new_object = {
            'id': len(self.objects) + 1,
            'name': name,
            'expected_count': count,
            'description': description,
            'created_at': datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        }
        
        self.objects.append(new_object)
        self.save_data()
        self.refresh_list()
        
        # Clear form
        self.name_var.set('')
        self.count_var.set(1)
        self.desc_var.set('')
        
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m v·∫≠t th·ªÉ '{name}' th√†nh c√¥ng!")
    
    def edit_object(self):
        """S·ª≠a v·∫≠t th·ªÉ"""
        selection = self.objects_tree.selection()
        if not selection:
            return
        
        item = self.objects_tree.item(selection[0])
        values = item['values']
        object_id = int(values[0])
        
        # T√¨m object trong list
        obj = next((o for o in self.objects if o['id'] == object_id), None)
        if not obj:
            return
        
        # T·∫°o dialog s·ª≠a
        self.edit_dialog(obj)
    
    def edit_dialog(self, obj):
        """Dialog s·ª≠a v·∫≠t th·ªÉ"""
        dialog = tk.Toplevel(self.root)
        dialog.title("S·ª≠a v·∫≠t th·ªÉ")
        dialog.geometry("400x250")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Variables
        name_var = tk.StringVar(value=obj['name'])
        count_var = tk.IntVar(value=obj['expected_count'])
        desc_var = tk.StringVar(value=obj['description'])
        
        # Widgets
        ttk.Label(dialog, text="T√™n v·∫≠t th·ªÉ:").grid(row=0, column=0, sticky='w', padx=10, pady=10)
        ttk.Entry(dialog, textvariable=name_var, width=30).grid(row=0, column=1, padx=10, pady=10)
        
        ttk.Label(dialog, text="S·ªë l∆∞·ª£ng:").grid(row=1, column=0, sticky='w', padx=10, pady=10)
        ttk.Spinbox(dialog, from_=1, to=100, textvariable=count_var, width=10).grid(row=1, column=1, sticky='w', padx=10, pady=10)
        
        ttk.Label(dialog, text="M√¥ t·∫£:").grid(row=2, column=0, sticky='w', padx=10, pady=10)
        ttk.Entry(dialog, textvariable=desc_var, width=30).grid(row=2, column=1, padx=10, pady=10)
        
        # Buttons
        button_frame = ttk.Frame(dialog)
        button_frame.grid(row=3, column=0, columnspan=2, pady=20)
        
        def save_changes():
            obj['name'] = name_var.get()
            obj['expected_count'] = count_var.get()
            obj['description'] = desc_var.get()
            
            self.save_data()
            self.refresh_list()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t v·∫≠t th·ªÉ!")
            dialog.destroy()
        
        ttk.Button(button_frame, text="üíæ L∆∞u", command=save_changes).pack(side='left', padx=10)
        ttk.Button(button_frame, text="‚ùå H·ªßy", command=dialog.destroy).pack(side='left', padx=10)
    
    def delete_object(self):
        """X√≥a v·∫≠t th·ªÉ"""
        selection = self.objects_tree.selection()
        if not selection:
            return
        
        item = self.objects_tree.item(selection[0])
        values = item['values']
        object_id = int(values[0])
        
        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a v·∫≠t th·ªÉ '{values[1]}'?"):
            # X√≥a object kh·ªèi list
            self.objects = [o for o in self.objects if o['id'] != object_id]
            self.save_data()
            self.refresh_list()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a v·∫≠t th·ªÉ!")
    
    def on_object_select(self, event):
        """X·ª≠ l√Ω khi ch·ªçn v·∫≠t th·ªÉ"""
        selection = self.objects_tree.selection()
        if selection:
            self.edit_btn.config(state='normal')
            self.delete_btn.config(state='normal')
        else:
            self.edit_btn.config(state='disabled')
            self.delete_btn.config(state='disabled')
    
    def refresh_list(self):
        """L√†m m·ªõi danh s√°ch"""
        # Clear existing items
        for item in self.objects_tree.get_children():
            self.objects_tree.delete(item)
        
        if not self.objects:
            self.objects_tree.insert('', 'end', values=('', 'Ch∆∞a c√≥ v·∫≠t th·ªÉ n√†o', '', '', ''))
            return
        
        for obj in self.objects:
            self.objects_tree.insert('', 'end', values=(
                obj['id'],
                obj['name'],
                obj['expected_count'],
                obj['description'],
                obj['created_at']
            ))
    
    def save_data(self):
        """L∆∞u d·ªØ li·ªáu v√†o file JSON"""
        try:
            with open('objects_data.json', 'w', encoding='utf-8') as f:
                json.dump(self.objects, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"L·ªói l∆∞u d·ªØ li·ªáu: {e}")
    
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ file JSON"""
        try:
            if os.path.exists('objects_data.json'):
                with open('objects_data.json', 'r', encoding='utf-8') as f:
                    self.objects = json.load(f)
            else:
                self.objects = []
        except Exception as e:
            print(f"L·ªói t·∫£i d·ªØ li·ªáu: {e}")
            self.objects = []
    
    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        self.save_data()
        self.root.destroy()

def main():
    """H√†m main"""
    root = tk.Tk()
    app = SimpleObjectManager(root)
    
    # X·ª≠ l√Ω ƒë√≥ng ·ª©ng d·ª•ng
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    # Ch·∫°y ·ª©ng d·ª•ng
    root.mainloop()

if __name__ == "__main__":
    main()
